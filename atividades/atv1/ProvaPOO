Questao1:
package A;

abstract class Animal {
	String Nome;
	
	public String getNome() {
		return Nome;
	}
	 public void setNome(String newname) {
			this.Nome = newname;
		}
	 public abstract void emitirSom();
}

Questao2:
package A;

public class Atv_002 {

}

class Mamifero extends Animal {
	String tipoPelo;
	public void emitirSom() {
		System.out.println("Som de mamifero");
	}
	public void movimentar() {
		// TODO Auto-generated method stub
		
	}
}

Questao3:
package A;

public class Atv_003 {
public static void main(String[] args) {
	Cachorro c1 = new Cachorro();
	c1.emitirSom();
}
}
class Cachorro extends Mamifero {
    String Raca;
    String Nome; 

    public void emitirSom() {
        System.out.println("Au Au!");
    }
}

Questao4:
package A;


public interface Domesticavel {
public void executarComando();
public static final String Comando = "Sentar";

public static void main(String [] args) {
	
}
}

Questao5:
package A;

class Atv_005 {
    Cachorro2 meuCachorro; 

    public static void main(String[] args) {
        Atv_005 q5 = new Atv_005(); 
        q5.meuCachorro = new Cachorro2();
        q5.meuCachorro.Nome = "Leoncio"; 
        q5.meuCachorro.executarComando(); 
        }
}

class Cachorro2 extends Mamifero implements Domesticavel {
    String Raca;
    String Nome; 

    public void emitirSom() {
        System.out.println("Au Au!");
    }

    @Override
    public void executarComando() {
        System.out.println(Nome + " está executando o comando: " + Comando + ".");
    }
}

Questao6:
package A;

class Robo implements Domesticavel {
    String ID;

    public String getID() {
        return ID;
    }

    public void executarComando() {
        System.out.println(ID + " está executando o comando: " + Comando + ".");
    }
}

public class Atv_006 {
    Robo myRobot;

    public static void main(String[] args) {
        Atv_006 r1 = new Atv_006();
        r1.myRobot = new Robo(); 
        r1.myRobot.ID = "0775"; 
        r1.myRobot.executarComando(); 
    }
}

Questao7:
package A;

public class Atv_007 {
	
	public static void main(String[] args) {
		
		Domesticavel[] domesticaveis = new Domesticavel[2];
		domesticaveis[0] = new Cachorro2();
		domesticaveis[1] = new Robo();
		
		for (Domesticavel domesticavel : domesticaveis) {
			domesticavel.executarComando();
		}
	}
	
}

Questao8:
package A;

class Cachorro8 extends Mamifero implements Domesticavel {
    String Raca;
    String Nome; 
    String tipoPelo;
    public String toString() {
    	System.out.println("[Nome do Cachorro]: " + Nome + ". [Raça]: " + Raca + ". [pelo]: " + tipoPelo + ".");
		return Nome;
    }
    public void emitirSom() {
        System.out.println("Au Au!");
    }

    @Override
    public void executarComando() {
        System.out.println(Nome + " está executando o comando: " + Comando + ".");
    }
}
    
public class Atv_008 {
public static void main(String[] args) {
	Cachorro8 c2 = new Cachorro8();
	c2.Nome = "Tobbey";
	c2.Raca = "Dobberman";
	c2.tipoPelo = "Pelugem curta";
	c2.toString();
}
}

Questap9:
package A;

class Cachorro3 extends Mamifero2 implements Domesticavel {
    String Raca;
    String Nome; 

    public void emitirSom() {
        System.out.println("Au Au!");
    }

    @Override
    public void executarComando() {
        System.out.println(Nome + " está executando o comando: " + Comando + ".");
    }
    public void movimentar() {
    	System.out.println(Nome + " está se deslocando!");
    }
}

class robo01 implements Domesticavel {
    String ID;

    public String getID() {
        return ID;
    }

    public void executarComando() {

        System.out.println(ID + " está executando o comando: " + Comando + ".");
    }
    public void movimentar() {
    	System.out.println(ID + " está se deslocando!");
    }
}

public class Atv_009 {
public static void main(String[] args) {
	Cachorro3 c3 = new Cachorro3();
	robo01 r3 = new robo01();
	c3.Nome = "Lucca";
	c3.movimentar();
	r3.ID = "7755443321";
	r3.movimentar();
}
}

abstract class Animal2 {
	String Nome;
	
	public String getNome() {
		return Nome;
	}
	 public void setNome(String newname) {
			this.Nome = newname;
		}
	 public abstract void emitirSom();
	 
	 public abstract void movimentar();
}
class Mamifero2 extends Animal2 {
	String tipoPelo;
	public void emitirSom() {
		System.out.println("Som de mamifero");
	}
	public void movimentar() {
		// TODO Auto-generated method stub
		
	}
}

Questao10:
package A;


public class Atv_010 {
	Morcego MeuMorcego;
	Ave MinhaAve;
	public static void main(String[] args) {
		
		Atv_010 q10 = new Atv_010();
		q10.MinhaAve = new Ave();
		q10.MeuMorcego = new Morcego();
		q10.MeuMorcego.Nome = "Stewart";
		q10.MinhaAve.Nome = "Bartt";
		q10.MeuMorcego.Voar();
		q10.MinhaAve.Voar();
		Animal Animal1 = new Morcego();
		Animal1.Nome = "Pedrim";
    
		// [C] : Os métodos acima herdam de ambos. Posso implementar-lhes de forma sagaz,
		// Não havendo brechas para perderem nenhum método, com exceção de Animal1.
		// Abaixo, os objetos Momorciego e Avave só podem executar métodos de Ivoador.
		IVoador Momorciego = new Morcego();
    
		IVoador Avave = new Ave();
		Avave.Voar();
		Momorciego.Voar();
		}

}

class Morcego extends Mamifero implements IVoador {

	@Override
	public void emitirSom() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void Voar() {
		// TODO Auto-generated method stub
		System.out.println("O morcego " + Nome + " está voando!");
	}
	
}

class Ave extends Animal implements IVoador {

	@Override
	public void Voar() {
		// TODO Auto-generated method stub
		System.out.println("A ave " + Nome + " está voando!");
	}

	@Override
	public void emitirSom() {
		// TODO Auto-generated method stub
		
	}
	
}

/* [B] : Animal1 (Morcego) herda as capacidades da classe Animal. 
 * O mesmo vale para Animal 2 (Ave). Voador1 e Voador2,  por outro lado,
 * implementam os métodos da interface IVoador.
 * 
 * [A] : Um objeto (Animal1) da classe Morcego é criado. Ele aparenta herdar 
 * da classe Animal, podendo iterar seus métodos. Em seguida, 
 * Um objeto (Animal2) da classe Ave é criado, ela aparenta também herdar da classe Animal,
 * também podendo iterar seus métodos. - Após a criação destes 2 objetos da classe Animal,
 * são criados dois objetos que hão de implementar somente os métodos da Interface IVoador.
 * Os objetos em questão sendo Voador1 e Voador2, mesmo que um seja um objeto da 
 * Classe Morcego, ele somente instância comandos da Interface IVoador. O mesmo pra Voador2.
 *
 * [D] : Do lado esquerdo dita o que se há no lado direito. A exemplo, IVoador, a Interface
 * é usada na criação de Voador1 e Voador2, sendo estes dois objetos limitados aos métodos 
 * desta Interface. Voador1 é um Voador, somente isso. Mesmo que Voador1 seja criado como
 * um objeto da classe/tipo Morcego. O mesmo vale para Voador2, que é uma Ave. 
 */
